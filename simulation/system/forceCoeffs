/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

# include "../0.orig/include/angulationParameters"


// Compute the area of the maximum cross section, obtained by intersecating the train shape
// (rectangular for simolicity) with the plane perpendicular to the wind velocity.

// First define Theta, the limit angle, that is the angle at which the lenght of the cross section
// becomes larger than the effective length of diagonal the train, that is d = sqrt(0.076^2 + 0.644^2)

d               #eval{ sqrt(0.076*0.076 + 0.644*0.644) };
Theta           #eval{ acos(0.076/$d) };

// Consider the limit case, regardless of the limiting angle defined in the angulationParameters file.
#if #eval{$angulationAngle > -$Theta} && #eval{$angulationAngle < $Theta}
    lCross       #eval{ 0.076 / cos(degToRad($angulationAngle)) };
#else
    lCross       $d;
#endif

dragX        #eval {cos(degToRad($angulationAngle))};
dragZ        #eval {sin(degToRad($angulationAngle))};

pitchX       #eval {sin(degToRad($angulationAngle))};
pitchZ       #eval {cos(degToRad($angulationAngle))};

// ************************************************************************* //
forceCoeffs1
{
    type            forceCoeffs;

    libs            (forces);

    writeControl    timeStep;
    timeInterval    1;

    log             yes;

    patches         (train);
    rho             rhoInf;      // Indicates incompressible
    rhoInf          1;           // Required when rho = rhoInf
    liftDir         (0 1 0);
    dragDir         ($dragX 0 $dragZ);
    CofR            (0 0 0);  // Axle midpoint on ground
    pitchAxis       ($pitchX 0 $pitchZ);
    magUInf         $parallelVelocity;
    lRef            0.434;        // Wheelbase length
    //The estimation for the reference area, in this case, has to be parametrized
    // using the angle of inclination of the wind velocity.
    Aref            #eval{ $lCross * 0.118};        // Estimated
}

/*
binField1
{
    type                    binField;
    libs                    (fieldFunctionObjects);
    binModel                singleDirectionUniformBin;
    fields                  (forceCoeff);
    patches                 (motorBikeGroup);
    decomposePatchValues    true;
    CofR                    ${../forceCoeffs1/CofR};

    binData
    {
        nBin        20;          // output data into 20 bins
        direction   (1 0 0);     // bin direction
        cumulative  yes;
    }
    writeControl            timeStep;
}
*/


// ************************************************************************* //
