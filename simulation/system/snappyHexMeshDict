/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;

// Include custom defined refinement parameters file
#include "../0.orig/include/angulationParameters"
#include "../0.orig/include/refinementParameters"


#ifeq $ROTATE_REFINEMENT_FLAG true
    // Define the local axes for the refinement boxes
e1_x    #eval{cos(degToRad($angulationAngle))};
e1_z    #eval{sin(degToRad($angulationAngle))};

e3_x    #eval{sin(degToRad($angulationAngle))};
e3_z    #eval{cos(degToRad($angulationAngle))};

normal_x   #eval{sin(degToRad($angulationAngle))};
normal_z   #eval{cos(degToRad($angulationAngle))};

#else
    e1_x    1;
    e1_z    0;

    e3_x    0;
    e3_z    1;

    normal_x   0;
    normal_z   1;

#endif

// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    train.stl
    {
        type triSurfaceMesh;
        name train;
    }

    #ifeq $BOX_GALLERIA_FLAG true

    box_galleria.stl
    {
        type triSurfaceMesh;
        name box_gallery;
    }

    backInternalWall.stl
    {
        type triSurfaceMesh;
        name backPlane;
    }   

    frontInternalWall.stl
    {
        type triSurfaceMesh;
        name frontPlane;
    }

    #endif

    // refinement box 1 (include only if REFINEMENT_BOX_1 is defined)
    #ifeq $REFINEMENT_BOX_0 true
    refinementBox0
    {
        type searchableRotatedBox;
        span       $SPAN_0;
        origin     $ORIG_0;
        e1              ($e1_x 0 $e1_z);    //relationship of e1 local axes and global coord.system
        e3              ($e3_x 0 $e3_z);    //relationship of e3 local axes and global coord.system
    }
    
    #endif

    // refinement box 2 (include only if REFINEMENT_BOX_2 is defined)
    #ifeq $REFINEMENT_BOX_1 true
    refinementBox1
    {
        type searchableRotatedBox;
        span      $SPAN_1;
        origin    $ORIG_1;
        e1              ($e1_x 0 $e1_z);    //relationship of e1 local axes and global coord.system
        e3              ($e3_x 0 $e3_z);    //relationship of e3 local axes and global coord.system
    }

    #endif

    // refinement box 3 (include only if REFINEMENT_BOX_3 is defined)
    #ifeq $REFINEMENT_BOX_2 true
    refinementBox2
    {
        type searchableRotatedBox;
        span      $SPAN_2;
        origin    $ORIG_2;
        e1              ($e1_x 0 $e1_z);    //relationship of e1 local axes and global coord.system
        e3              ($e3_x 0 $e3_z);    //relationship of e3 local axes and global coord.system
    }

    #endif

    // refinement box 4 (include only if REFINEMENT_BOX_4 is defined)
    #ifeq $REFINEMENT_BOX_3 true
    refinementBox3
    {
        type searchableRotatedBox;
        span      $SPAN_3;
        origin    $ORIG_3;
        e1              ($e1_x 0 $e1_z);    //relationship of e1 local axes and global coord.system
        e3              ($e3_x 0 $e3_z);    //relationship of e3 local axes and global coord.system
    }

    #endif
}


// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 10000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 100000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 10;

    // Allow a certain level of imbalance during refining
    // (since balancing is quite expensive)
    // Expressed as fraction of perfect balance (= overall number of cells /
    // nProcs). 0=balance always.
    maxLoadUnbalance 0.10;


    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 3;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        {
            file "train.eMesh";
            level 5;
        }
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
        train
        {
            // Surface-wise min and max refinement level
            level (5 5);

            // Optional specification of patch type (default is wall). No
            // constraint types (cyclic, symmetry) etc. are allowed.
            patchInfo
            {
                type wall;
                inGroups (trainGroup);
            }
        }

        #ifeq $BOX_GALLERIA_FLAG true
        box_gallery
        {
            // Surface-wise min and max refinement level
            level (2 3);

            // Optional specification of patch type (default is wall). No
            // constraint types (cyclic, symmetry) etc. are allowed.
            patchInfo
            {
                type wall;
                inGroups (boxGroup);
            }
        }

        backPlane
        {
            level (1 1);

            patchInfo
            {
                type wall;
                inGroups (backGroup);
            }
        }

        frontPlane
        {

            level (1 1);

            patchInfo
            {
                type wall;
                inGroups (frontGroup);
            }
        }

        #endif



    }

    // Resolve sharp angles
    resolveFeatureAngle 30;


    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions
    {

        #ifeq $REFINEMENT_BOX_0 true
        refinementBox0
        {
            mode inside;
            levels ((1E15 $REFINEMENT_LEVEL_0));
        }
        #endif

        #ifeq $REFINEMENT_BOX_1 true
        refinementBox1
        {
            mode inside;
            levels ((1E15 $REFINEMENT_LEVEL_1));
        }
        #endif

        #ifeq $REFINEMENT_BOX_2 true
        refinementBox2
        {
            mode inside;
            levels ((1E15 $REFINEMENT_LEVEL_2));
        }
        #endif

        #ifeq $REFINEMENT_BOX_3 true
        refinementBox3
        {
            mode inside;
            levels ((1E15 $REFINEMENT_LEVEL_3));
        }
        #endif
        #ifeq $REFINEMENT_TRAIN true
        train
        {
            mode distance;
            levels (($REFINEMENT_DISTANCE   $REFINEMENT_LEVEL_TRAIN));
        }
        #endif

    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (2.8 1 1);



    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces true;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 2.0;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;

    // Feature snapping

        //- Number of feature edge snapping iterations.
        //  Leave out altogether to disable.
        nFeatureSnapIter 10;

        //- Detect (geometric only) features by sampling the surface
        //  (default=false).
        implicitFeatureSnap false;

        //- Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        //- Detect points on multiple surfaces (only for explicitFeatureSnap)
        multiRegionFeatureSnap false;
}



// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;

    // Per final patch (so not geometry!) the layer information
    layers
    {
        "(lowerWall|train).*"
        {
            nSurfaceLayers 1;
        }
    }

    // Expansion factor for layer mesh
    expansionRatio 1.0;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    // See relativeSizes parameter.
    finalLayerThickness 0.3;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.1;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 1.7.x! (didn't do anything in 1.7.x)
    nGrow 0;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 60;

    // At non-patched sides allow mesh to slip if extrusion direction makes
    // angle larger than slipFeatureAngle.
    slipFeatureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 3;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 1.7.x! 90 degrees corresponds to 130
    // in 1.7.x.
    minMedialAxisAngle 90;

    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;

    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"


    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- Amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Write flags
writeFlags
(
    scalarLevels
    layerSets
    layerFields     // write volScalarField for layer coverage
);


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;


// ************************************************************************* //
